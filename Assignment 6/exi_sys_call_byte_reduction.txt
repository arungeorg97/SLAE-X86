Objective 

	This shellcode is to make a clean exit ie exit syscall(0) , which is of 8 bytes. lets try some byte trimming

Original Reference
    :http://shell-storm.org/shellcode/files/shellcode-623.php

	Exit1.c

	/*
	Name   : 8 bytes sys_exit(0) x86 linux shellcode
	Date   : may, 31 2010
	Author : gunslinger_
	Web    : devilzc0de.com
	blog   : gunslinger.devilzc0de.com
	tested on : linux debian
	*/

	char *bye=
 	"\x31\xc0"                    /* xor    %eax,%eax */
 	"\xb0\x01"                    /* mov    $0x1,%al */
 	"\x31\xdb"                    /* xor    %ebx,%ebx */
 	"\xcd\x80";                   /* int    $0x80 */

	int main(void)
	{
		((void (*)(void)) bye)();
		return 0;
	}

man 2 exit , illutsrates exit() as void _exit(int status);

EAX is set to 1 , exit() syscall

EBX is set to 0 



	toor@ubuntu:~/Desktop/slae/Assignments/6$ objdump -d ./exit1|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|
	sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'
	"\x31\xc0\xb0\x01\x31\xdb\xcd\x80"
	toor@ubuntu:~/Desktop/slae/Assignments/6$ nano shellcodetest.c
	toor@ubuntu:~/Desktop/slae/Assignments/6$ gcc -fno-stack-protector -z execstack shellcodetest.c -o shellcode
	toor@ubuntu:~/Desktop/slae/Assignments/6$ ./shellcode
	shellcode length: 8

Modified Version

Instead of move operation we are gonna use stack push and pop to save some bytes.
I took inspiration from abatchy's blog(must read)
	Refer: https://www.abatchy.com/2017/04/shellcode-reduction-tips-x86



	toor@ubuntu:~/Desktop/slae/Assignments/6$ cat exit.asm
	global _start


	section .text

	_start:
        	push 0x1
        	pop eax
        	pop ebx                 ;push pop instead of inc and xor

        	int 0x80                ; EAX and EBX contains 1;setting status flag is not excatly a requirement.The value status is returned to the parent process as the process's exit status.commonly used 					    ; for debugging purpose # we can even skip the pop ebx instruction to reduce a byte.

	toor@ubuntu:~/Desktop/slae/Assignments/6$ 

Compiling and Running

	toor@ubuntu:~/Desktop/slae/Assignments/6$ cat compile.sh
	#!/bin/bash

	echo 'Assembling with nasm'
	nasm -f elf32 -o $1.o $1.asm

	echo 'Success, Now Linking'
	ld -o $1 $1.o

	echo 'Go Ahead, may the force be with you'

	toor@ubuntu:~/Desktop/slae/Assignments/6$ ./compile.sh exit
	Assembling with nasm
	Success, Now Linking
	Go Ahead, may the force be with you

	toor@ubuntu:~/Desktop/slae/Assignments/6$ objdump -d ./exit|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|s
	ed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'
	"\x6a\x01\x58\x5b\xcd\x80"

	toor@ubuntu:~/Desktop/slae/Assignments/6$ nano shellcodetest.c
	toor@ubuntu:~/Desktop/slae/Assignments/6$ gcc -fno-stack-protector -z execstack shellcodetest.c -o shellcode
	toor@ubuntu:~/Desktop/slae/Assignments/6$ ./shellcode
	shellcode length: 6
	toor@ubuntu:~/Desktop/slae/Assignments/6$

Works like a charm

SIZE Reduction


orginal byte size = 8
new byte size = 6
difference = 2
2/8*100   25%reduction